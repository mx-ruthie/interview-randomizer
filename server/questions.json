{
	"questions": [{
			"text": "The parameter weekday is true if it is a weekday, and the parameter vacation is true if we are on vacation. We sleep in if it is not a weekday or we're on vacation. Return true if we sleep in.",
			"testCases": [
				"sleep_in(false, false) → true;",
				"sleep_in(true, false) → false;",
				"sleep_in(false, true) → true;"
			]
		},
		{
			"text": "Given an int n, return the absolute difference between n and 21, except return double the absolute difference if n is over 21.",
			"testCases": [
				"diff21(19) → 2;",
				"diff21(10) → 11;",
				"diff21(21) → 0;"
			]
		},
		{
			"text": "Given an int n, return true if it is within 10 of 100 or 200. Note: abs(num) computes the absolute value of a number.",
			"testCases": [
				"near_hundred(93) → true;",
				"near_hundred(90) → true;",
				"near_hundred(89) → false;"
			]
		},
		{
			"text": "Given a non-empty string and an int n, return a new string where the char at index n has been removed. The value of n will be a valid index of a char in the original string (i.e. n will be in the range 0..len(str)-1 inclusive).",
			"testCases": [
				"missing_char('kitten', 1) → 'ktten';",
				"missing_char('kitten', 0) → 'itten';",
				"missing_char('kitten', 4) → 'kittn';"
			]
		},
		{
			"text": "We have two monkeys, a and b, and the parameters a_smile and b_smile indicate if each is smiling. We are in trouble if they are both smiling or if neither of them is smiling. Return true if we are in trouble.",
			"testCases": [
				"monkey_trouble(true, true) → true;",
				"monkey_trouble(false, false) → true;",
				"monkey_trouble(true, false) → false;"
			]
		},
		{
			"text": "We have a loud talking parrot. The 'hour' parameter is the current hour time in the range 0..23. We are in trouble if the parrot is talking and the hour is before 7 or after 20. Return true if we are in trouble.",
			"testCases": [
				"parrot_trouble(true, 6) → true;",
				"parrot_trouble(true, 7) → false;",
				"parrot_trouble(false, 6) → false;"
			]
		},
		{
			"text": "Given 2 int values, return true if one is negative and one is positive. Except if the parameter 'negative' is true, then return true only if both are negative.",
			"testCases": [
				"pos_neg(1, -1, false) → true;",
				"pos_neg(-1, 1, false) → true;",
				"pos_neg(-4, -5, true) → true;"
			]
		},
		{
			"text": "Given a string, return a new string where the first and last chars have been exchanged.",
			"testCases": [
				"front_back('code') → 'eodc';",
				"front_back('a') → 'a';",
				"front_back('ab') → 'ba';"
			]
		},
		{
			"text": "Given two int values, return their sum. Unless the two values are the same, then return double their sum.",
			"testCases": [
				"sum_double(1, 2) → 3;",
				"sum_double(3, 2) → 5;",
				"sum_double(2, 2) → 8;"
			]
		},
		{
			"text": "Given 2 ints, a and b, return true if one if them is 10 or if their sum is 10.", 
			"testCases": [
				"makes10(9, 10) → true;",
				"makes10(9, 9) → false;",
				"makes10(1, 9) → true;"
			]
		}
	]
}